# This is sample config file for quorum reporting
title = "Quorum reporting confg example"

# The list of addresses we want to index in more detail, including pulling storage & events
# It includes the address itself, as well as a default template
addresses = [
    { address = "0x1932c48b2bf8102ba33b4a6b545c32236e342f34", templateName = "SimpleStorage" }
]

# A template contains an ABI definition for parsing contract events, and a storage layout for a the contracts variables
# These definitions allow the data collected by the reporting tool to be parsed in a more usable format
# Both the ABI and Storage Layout can be obtained from the Solidity compiler
# - the ABI is present is almost all versions of the compiler
# - the storage layout is present in version 0.6.5 of the compiler
templates = [
    { templateName = "SimpleStorage", abi = '[{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_initVal","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_value","type":"uint256"}],"name":"valueSet","type":"event"}]', storageLayout = '{"storage":[{"astId":3,"contract":"scripts/simplestorage.sol:SimpleStorage","label":"storedData","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}' }
]

# Database settings
[database]

    # How many transactions and blocks should be kept in memory for quicker retrieval instead of going to the database
    # A higher value will give higher performance at the expense of more memory
    cacheSize = 10

# The connection details to the ElasticSearch database
# These are mostly a passthrough to the ElasticSearch golang client
# found at https://github.com/elastic/go-elasticsearch
[database.elasticsearch]

    # A list of URLs the client will try and connect to
    # Can also be configured by setting the ELASTICSEARCH_URL environment variable
    urls = ["http://localhost:9200"]

#    cloudid = "example elasticsearch cloudid"

    # Username + password can also be set in the URL
#    username = "user"
#    password = "pass"
#    apikey = ""

    	# Path to PEM-encoded certificate authorities file
    	# See https://www.elastic.co/blog/configuring-ssl-tls-and-https-to-secure-elasticsearch-kibana-beats-and-logstash
#    	cacert = "path to cacert file"

# Details about this applications RPC server for serving requests
[server]

    # The interface + port the application should bind to
    rpcAddr = "localhost:4000"
    rpcCorsList = ["*"]
    rpcvHosts = ["*"]
    # The port number the in-built UI should run on
    uiPort = 3000

# Connection details to Quorum
[connection]

    wsUrl = "ws://localhost:23000"
    graphQLUrl = "http://localhost:8547/graphql"
    # How long the application should take, in seconds, to attempt a reconnect to Quorum at startup
    reconnectInterval = 5
    # How many times the application should attempt to connect to Quorum before giving up
    maxReconnectTries = 5

# Various performance tuning options, do not affect functionality
[tuning]

    # How many blocks can be queued waiting to be processed
    # Increasing this allows more batching to happen, resulting in quicker processing times per block
    # but will use increased memory
    blockProcessingQueueSize = 1000