// Code generated by MockGen. DO NOT EDIT.
// Source: quorumengineering/quorum-report/database/elasticsearch (interfaces: APIClient)

// Package elasticsearch_mocks is a generated GoMock package.
package elasticsearch_mocks

import (
	esapi "github.com/elastic/go-elasticsearch/v7/esapi"
	esutil "github.com/elastic/go-elasticsearch/v7/esutil"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPIClient is a mock of APIClient interface
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// DoRequest mocks base method
func (m *MockAPIClient) DoRequest(arg0 esapi.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequest", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRequest indicates an expected call of DoRequest
func (mr *MockAPIClientMockRecorder) DoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockAPIClient)(nil).DoRequest), arg0)
}

// GetBulkHandler mocks base method
func (m *MockAPIClient) GetBulkHandler(arg0 string) esutil.BulkIndexer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkHandler", arg0)
	ret0, _ := ret[0].(esutil.BulkIndexer)
	return ret0
}

// GetBulkHandler indicates an expected call of GetBulkHandler
func (mr *MockAPIClientMockRecorder) GetBulkHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkHandler", reflect.TypeOf((*MockAPIClient)(nil).GetBulkHandler), arg0)
}

// ScrollAllResults mocks base method
func (m *MockAPIClient) ScrollAllResults(arg0, arg1 string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrollAllResults", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrollAllResults indicates an expected call of ScrollAllResults
func (mr *MockAPIClientMockRecorder) ScrollAllResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrollAllResults", reflect.TypeOf((*MockAPIClient)(nil).ScrollAllResults), arg0, arg1)
}
