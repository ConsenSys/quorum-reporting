{"version":3,"sources":["resources/quorum-logo.png","redux/reducers/user.js","constants.js","redux/actionTypes.js","redux/reducers/system.js","config.js","redux/reducers/index.js","redux/store/index.js","components/SearchField.js","components/Popup.js","components/ContractTable.js","components/ContractForm.js","redux/actions/contractActions.js","redux/actions/pageActions.js","client/rpcClient.js","client/fetcher.js","containers/ContractListContainer.js","components/RecursiveInfoList.js","containers/SearchContainer.js","components/SettingForm.js","components/MenuDropdown.js","redux/actions/systemActions.js","containers/HeaderContainer.js","components/ContractSelector.js","components/ExpandableTxRow.js","components/TransactionResultTable.js","components/ExpandableEventRow.js","components/EventResultTable.js","containers/ContractInfoContainer.js","components/ReportForm.js","components/Report.js","containers/ReportContainer.js","pages/HomePage.js","App.js","index.js"],"names":["module","exports","initialState","page","selectedContract","contracts","userReducer","state","action","type","rpcEndpoint","isConnected","lastPersistedBlockNumber","systemReducer","rootReducer","combineReducers","user","system","middleware","thunk","store","createStore","applyMiddleware","useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","SearchField","props","classes","Paper","className","InputBase","placeholder","onChange","handleSearchTextChange","onKeyPress","e","key","handleSearch","value","searchText","IconButton","aria-label","onClick","Popup","variant","popupId","popupState","style","Button","size","color","bindTrigger","name","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","Box","p","Typography","content","StyledTableHeader","withStyles","head","backgroundColor","palette","primary","light","common","white","body","fontSize","TableCell","ContractTable","Table","stickyHeader","TableHead","TableRow","TableBody","map","c","i","address","Link","component","handleNavigateContract","m","abi","template","handleContractUpdate","handleContractDelete","handleNavigateReport","ContractForm","handleKeyPress","handleSetRPCEndpoint","Dialog","open","isOpen","onClose","handleCloseSetting","aria-labelledby","maximumwidth","fullWidth","DialogTitle","id","DialogContent","DialogContentText","TextField","label","newContract","handleNewContractAddressChange","margin","autoFocus","handleNewContractABIChange","multiline","handleNewContractTemplateChange","errorMessage","Alert","severity","DialogActions","handleRegisterNewContract","selectContractAction","changePageAction","requestCount","getABI","baseURL","axios","post","jsonrpc","method","params","getStorageABI","getTransaction","txHash","getBlockNumber","getLastPersistedBlockNumber","then","res","data","error","message","result","addContract","addAddress","addABI","addStorageABI","deleteContract","deleteAddress","getContracts","getAddresses","getContractsDetail","getContractCreationTx","getContractCreationTransaction","getTransactionDetail","getToTxs","pageSize","getAllTransactionsToAddress","getTransactionsDetail","txs","total","getInternalToTxs","getAllTransactionsInternalToAddress","getEvents","getAllEventsFromAddress","event","topic","rawEvent","topics","transactionHash","blockNumber","parsedEvent","eventSig","parsedData","getReportData","startBlockNumber","endBlockNumber","parseInt","getStorageHistory","generateReportData","historicState","getSingleBlock","getBlock","addresses","Promise","resolve","reject","length","abiCounter","templateCounter","push","x","catch","txsWithDetails","counter","hash","rawTransaction","from","to","parsedTransaction","txSig","func4Bytes","parsedEvents","internalCalls","reportData","currentState","nextState","isStateEqual","unshift","state1","state2","markedState2","noChange","historicStorage","changed","ContractListContainer","getAllRegisteredContract","dispatch","getContractsAction","handleOpenSetting","setState","formIsOpen","target","setTimeout","toString","this","Card","card","CardContent","align","React","Component","connect","minWidth","marginTop","marginBottom","RecursiveInfoList","handleReturn","List","Object","keys","displayData","k","ListItem","JSON","stringify","TextareaAutosize","readOnly","rowsMax","defaultValue","SearchContainer","test","alert","SettingForm","newRPCEndpoint","handleRPCEndpointChange","MenuDropdown","useState","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","keepMounted","Boolean","MenuItem","handleMenuClick","updateBlockNumberAction","HeaderContainer","blockNumberBlinkEffect","blockNumberAppear","connectReporting","toHomePage","timerID","setInterval","clearInterval","AppBar","position","Toolbar","ButtonBase","src","require","height","alt","grow","Fade","in","timeout","flexGrow","formControl","ContractSelector","FormControl","InputLabel","Select","handleSelectedContractChange","selectedAction","handleSelectedActionChange","actions","a","useRowStyles","borderBottom","ExpandableTxRow","setOpen","Fragment","scope","paddingBottom","paddingTop","colSpan","Collapse","unmountOnExit","maxWidth","TransactionResultTable","isLoading","TableContainer","slice","currentPage","tx","TablePagination","rowsPerPageOptions","count","totalTxs","rowsPerPage","onChangePage","handleChangePage","CircularProgress","ExpandableEventRow","totalEvents","ContractInfoContainer","newPage","newSearch","displayTxResult","displayEventResult","currentContract","currentSelectedAction","searchByPage","contract","pageNumber","displayDataLength","console","log","bind","EventResultTable","ReportForm","handleStartBlockChange","handleEndBlockChange","handleReport","Report","parsedStorage","s","v","rowsMin","ReportContainer","isNaN","displayReport","HomePage","renderPageContent","createMuiTheme","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.59d67f30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quorum-logo.e2dac645.png\";","import * as types from '../actionTypes';\nimport { HomePageId } from \"../../constants\";\n\nconst initialState = {\n    page: HomePageId,\n    selectedContract: \"\",\n    contracts: [],\n};\n\nconst userReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case types.CHANGE_PAGE:\n            return {\n                ...state,\n                page: action.page,\n            };\n        case types.SELECT_CONTRACT:\n            return {\n                ...state,\n                selectedContract: action.selectedContract,\n            };\n        case types.GET_CONTRACTS:\n            return {\n                ...state,\n                contracts: action.contracts,\n            };\n        default:\n            return state\n    }\n};\n\nexport default userReducer","export const HomePageId = \"Home\";\nexport const ContractPageId = \"Contract\";\nexport const ReportPageId = \"Report\";\n\nexport const GetContractCreationTx = \"Get Contract Creation Tx\";\nexport const GetToTxs = \"Get To Txs\";\nexport const GetInternalToTxs = \"Get Internal To Txs\";\nexport const GetEvents = \"Get Events\";","// user\nexport const CHANGE_PAGE = 'CHANGE_PAGE';\nexport const SELECT_CONTRACT = 'SELECT_CONTRACT';\nexport const GET_CONTRACTS = 'GET_CONTRACTS';\n\n// system\nexport const CONNECT = 'CONNECT';\nexport const DISCONNECT = 'DISCONNECT';\nexport const UPDATE_ENDPOINT = 'UPDATE_ENDPOINT';\nexport const UPDATE_BLOCK_NUMBER = 'UPDATE_BLOCK_NUMBER';","import * as types from '../actionTypes';\nimport { DefaultRPCEndpoint } from '../../config';\n\nconst initialState = {\n    rpcEndpoint: DefaultRPCEndpoint,\n    isConnected: false,\n    lastPersistedBlockNumber: \"\",\n};\n\nconst systemReducer = (state=initialState, action) => {\n    switch (action.type) {\n        case types.CONNECT:\n            return {\n                ...state,\n                isConnected: true,\n            };\n        case types.DISCONNECT:\n            return {\n                ...state,\n                isConnected: false,\n            };\n        case types.UPDATE_ENDPOINT:\n            return {\n                ...state,\n                rpcEndpoint: action.rpcEndpoint,\n            };\n        case types.UPDATE_BLOCK_NUMBER:\n            return {\n                ...state,\n                lastPersistedBlockNumber: action.lastPersistedBlockNumber,\n            };\n        default:\n            return state\n    }\n};\n\nexport default systemReducer","export const DefaultRPCEndpoint = \"http://localhost:4000\";","import { combineReducers } from 'redux';\nimport user from './user';\nimport system from './system';\n\nconst rootReducer = combineReducers({\n\tuser, system\n});\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../reducers';\n\nconst middleware = [thunk];\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n}\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(...middleware),\n);\n\nexport default store","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 1000,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n}));\n\nexport default function SearchField(props) {\n    const classes = useStyles();\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            props.handleSearch()\n        }\n    };\n\n    return (\n        <Paper className={classes.root}>\n            <InputBase\n                className={classes.input}\n                placeholder=\"Search by Tx Hash or Block Number\"\n                onChange={props.handleSearchTextChange}\n                onKeyPress={handleKeyPress}\n                value={props.searchText}\n            />\n            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\" onClick={props.handleSearch}>\n                <SearchIcon />\n            </IconButton>\n        </Paper>\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport PopupState, { bindTrigger, bindPopover } from 'material-ui-popup-state';\n\nexport default function Popup(props) {\n    return (\n        <PopupState variant=\"popover\" popupId=\"demo-popup-popover\">\n            {(popupState) => (\n                <div style={{ display: 'inline-flex' }}>\n                    <Button variant=\"contained\" size=\"small\" color=\"primary\" {...bindTrigger(popupState)}>\n                        {props.name}\n                    </Button>\n                    <Popover\n                        {...bindPopover(popupState)}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'center',\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'center',\n                        }}\n                    >\n                        <Box p={2}>\n                            <Typography>{props.content}</Typography>\n                        </Box>\n                    </Popover>\n                </div>\n            )}\n        </PopupState>\n    );\n}","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport Popup from './Popup';\n\nconst StyledTableHeader = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.primary.light,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nfunction ContractTable(props) {\n    return (\n        <Table stickyHeader>\n            <TableHead>\n                <TableRow>\n                    <StyledTableHeader width=\"5%\">#</StyledTableHeader>\n                    <StyledTableHeader width=\"60%\">Contract Address</StyledTableHeader>\n                    <StyledTableHeader width=\"20%\">Contract Details</StyledTableHeader>\n                    <StyledTableHeader width=\"15%\">Contract Operations</StyledTableHeader>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {props.contracts.map( (c, i) => (\n                    <TableRow key={c.address}>\n                        <TableCell>\n                            {i+1}\n                        </TableCell>\n                        <TableCell>\n                            <Link\n                                component=\"button\"\n                                variant=\"body2\"\n                                onClick={props.handleNavigateContract}\n                                value={c.address}\n                            >\n                                {c.address}\n                            </Link>\n                        </TableCell>\n                        <TableCell>\n                            <Box component=\"span\" m={1}>\n                                <Popup\n                                    name=\"Show ABI\"\n                                    content={c.abi}\n                                />\n                            </Box>\n                            <Box component=\"span\" m={1}>\n                                <Popup\n                                    name=\"Show Template\"\n                                    content={c.template}\n                                />\n                            </Box>\n                        </TableCell>\n                        <TableCell>\n                            <IconButton onClick={()=>{props.handleContractUpdate(c.address)}} >\n                                <EditIcon color=\"primary\" />\n                            </IconButton>\n                            <IconButton onClick={()=>{props.handleContractDelete(c.address)}} >\n                                <DeleteIcon color=\"primary\" />\n                            </IconButton>\n                            <IconButton onClick={()=>{props.handleNavigateReport(c.address)}} >\n                                <ReceiptIcon color=\"primary\" />\n                            </IconButton>\n                        </TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n    )\n}\n\nexport default ContractTable","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Alert from '@material-ui/lab/Alert';\n\nfunction ContractForm(props) {\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            props.handleSetRPCEndpoint()\n        }\n    };\n\n    return (\n        <Dialog open={props.isOpen} onClose={props.handleCloseSetting} aria-labelledby=\"form-dialog-title\" maximumwidth=\"400\" fullWidth>\n            <DialogTitle id=\"form-dialog-title\">Register new contract</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Register a new contract for reporting.\n                </DialogContentText>\n                <br/>\n                <TextField\n                    label=\"Contract Address\"\n                    value={props.newContract.address}\n                    onChange={props.handleNewContractAddressChange}\n                    onKeyPress={handleKeyPress}\n                    margin=\"dense\"\n                    fullWidth\n                    autoFocus\n                />\n                <TextField\n                    label=\"Contract ABI\"\n                    value={props.newContract.abi}\n                    onChange={props.handleNewContractABIChange}\n                    onKeyPress={handleKeyPress}\n                    margin=\"dense\"\n                    fullWidth\n                    multiline\n                />\n                <TextField\n                    label=\"Contract Storage Template\"\n                    value={props.newContract.template}\n                    onChange={props.handleNewContractTemplateChange}\n                    onKeyPress={handleKeyPress}\n                    margin=\"dense\"\n                    fullWidth\n                    multiline\n                />\n            </DialogContent>\n            {\n                props.errorMessage &&\n                <div>\n                    <br/>\n                    <Alert severity=\"error\">{props.errorMessage}</Alert>\n                </div>\n            }\n            <DialogActions>\n                <Button onClick={props.handleCloseSetting} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={props.handleRegisterNewContract} color=\"primary\">\n                    Register\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default ContractForm","import * as types from '../actionTypes';\n\nexport const selectContractAction = (selectedContract) => ({\n    type: types.SELECT_CONTRACT,\n    selectedContract,\n});\n\nexport const getContractsAction = (contracts) => ({\n    type: types.GET_CONTRACTS,\n    contracts,\n});","import * as types from '../actionTypes';\n\nexport const changePageAction = (page) => ({\n    type: types.CHANGE_PAGE,\n    page,\n});","import axios from 'axios';\n\n// lower level RPC services, should only be used by fetcher.js\n\nlet requestCount = 0;\n\nexport const getLastPersistedBlockNumber = (baseURL) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getLastPersistedBlockNumber\",\n        params: [],\n        id: requestCount++,\n    })\n};\n\nexport const getAddresses = (baseURL) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getAddresses\",\n        params: [],\n        id: requestCount++,\n    })\n};\n\nexport const addAddress = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_addAddress\",\n        params: [address],\n        id: requestCount++,\n    })\n};\n\nexport const deleteAddress = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_deleteAddress\",\n        params: [address],\n        id: requestCount++,\n    })\n};\n\nexport const getABI = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getABI\",\n        params: [address],\n        id: requestCount++,\n    })\n};\n\nexport const getStorageABI = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getStorageABI\",\n        params: [address],\n        id: requestCount++,\n    })\n};\n\nexport const addABI = (baseURL, address, abi) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_addABI\",\n        params: [address, abi],\n        id: requestCount++,\n    })\n};\n\nexport const addStorageABI = (baseURL, address, template) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_addStorageABI\",\n        params: [address, template],\n        id: requestCount++,\n    })\n};\n\nexport const getContractCreationTransaction = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getContractCreationTransaction\",\n        params: [address],\n        id: requestCount++,\n    })\n};\n\nexport const getAllTransactionsToAddress = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getAllTransactionsToAddress\",\n        params: [address, {pageSize: 1000}], //TODO: use very large page size temporarily\n        id: requestCount++,\n    })\n};\n\nexport const getAllTransactionsInternalToAddress = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getAllTransactionsInternalToAddress\",\n        params: [address, {pageSize: 1000}], //TODO: use very large page size temporarily\n        id: requestCount++,\n    })\n};\n\nexport const getAllEventsFromAddress = (baseURL, address) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getAllEventsFromAddress\",\n        params: [address, {pageSize: 1000}], //TODO: use very large page size temporarily\n        id: requestCount++,\n    })\n};\n\nexport const getBlock = (baseURL, blockNumber) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getBlock\",\n        params: [blockNumber],\n        id: requestCount++,\n    })\n};\n\nexport const getTransaction = (baseURL, txHash) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getTransaction\",\n        params: [txHash],\n        id: requestCount++,\n    })\n};\n\nexport const getStorageHistory = (baseURL, address, startBlockNumber, endBlockNumber) => {\n    return axios.post(baseURL, {\n        jsonrpc: '2.0',\n        method: \"reporting_getStorageHistory\",\n        params: [address, parseInt(startBlockNumber), parseInt(endBlockNumber)],\n        id: requestCount++,\n    })\n};","import {\n    getLastPersistedBlockNumber, getAddresses, getABI, getStorageABI, getContractCreationTransaction,\n    getAllTransactionsToAddress, getAllTransactionsInternalToAddress, getAllEventsFromAddress, getStorageHistory,\n    addAddress, addABI, addStorageABI, deleteAddress, getBlock, getTransaction,\n} from '../client/rpcClient';\n\nexport const getBlockNumber = (baseURL) => {\n    return getLastPersistedBlockNumber(baseURL).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return res.data.result\n    })\n};\n\nexport const addContract = (baseURL, newContract) => {\n    return addAddress(baseURL, newContract.address).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return addABI(baseURL, newContract.address, newContract.abi).then( (res) => {\n            if (res.data.error) {\n                throw res.data.error.message\n            }\n            return addStorageABI(baseURL, newContract.address, newContract.template)\n        })\n    })\n};\n\nexport const deleteContract = (baseURL, address) => {\n    return deleteAddress(baseURL, address).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return res\n    })\n};\n\nexport const getContracts = (baseURL) => {\n    return getAddresses(baseURL).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return getContractsDetail(baseURL, res.data.result)\n    })\n};\n\nexport const getContractCreationTx = (baseURL, address) => {\n    return getContractCreationTransaction(baseURL, address).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return getTransactionDetail(baseURL, res.data.result)\n    })\n};\n\nexport const getToTxs = (baseURL, address) => {\n    return getAllTransactionsToAddress(baseURL, address).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return getTransactionsDetail(baseURL, res.data.result[\"transactions\"]).then( (txs) => {\n            return {\n                data: txs,\n                total: res.data.result[\"total\"]\n            }\n        })\n    })\n};\n\nexport const getInternalToTxs = (baseURL, address) => {\n    return getAllTransactionsInternalToAddress(baseURL, address).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return getTransactionsDetail(baseURL, res.data.result[\"transactions\"]).then( (txs) => {\n            return {\n                data: txs,\n                total: res.data.result[\"total\"]\n            }\n        })\n    })\n};\n\nexport const getEvents = (baseURL, address) => {\n    return getAllEventsFromAddress(baseURL, address).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return {\n            data: res.data.result[\"events\"].map( (event) => ({\n                topic: event.rawEvent.topics[0],\n                txHash: event.rawEvent.transactionHash,\n                address: event.rawEvent.address,\n                blockNumber: event.rawEvent.blockNumber,\n                parsedEvent: {\n                    eventSig: event.eventSig,\n                    parsedData: event.parsedData,\n                },\n            })),\n            total: res.data.result[\"total\"]\n        }\n    })\n};\n\nexport const getReportData = (baseURL, address, startBlockNumber, endBlockNumber) => {\n    return getStorageHistory(baseURL, address, startBlockNumber, endBlockNumber).then( (res) => {\n        return generateReportData(res.data.result.historicState)\n    })\n};\n\nexport const getSingleBlock = (baseURL, blockNumber) => {\n    return getBlock(baseURL, blockNumber).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return res.data.result\n    })\n};\n\nexport const getSingleTransaction = (baseURL, txHash) => {\n    return getTransaction(baseURL, txHash).then( (res) => {\n        if (res.data.error) {\n            throw res.data.error.message\n        }\n        return {\n            txSig: res.data.result.txSig,\n            func4Bytes: res.data.result.func4Bytes,\n            parsedData: res.data.result.parsedData,\n            parsedEvents: res.data.result.parsedEvents,\n            ...res.data.result.rawTransaction\n        }\n    })\n};\n\nconst getContractsDetail = (baseURL, addresses) => {\n    return new Promise( (resolve, reject) => {\n        if (addresses.length === 0) {\n            resolve([])\n        }\n        let contracts = [];\n        let abiCounter = addresses.length;\n        let templateCounter = addresses.length;\n        for (let i = 0; i < addresses.length; i++) {\n            contracts.push({address: addresses[i]});\n            ( (x) => {\n                getABI(baseURL, addresses[x]).then( (res) => {\n                    contracts[x].abi = res.data.result;\n                    abiCounter--;\n                    if (abiCounter === 0 && templateCounter === 0) {\n                        resolve(contracts)\n                    }\n                }).catch(reject)\n            })(i);\n            ( (x) => {\n                getStorageABI(baseURL, addresses[x]).then( (res) => {\n                    contracts[x].template = res.data.result;\n                    templateCounter--;\n                    if (abiCounter === 0 && templateCounter === 0) {\n                        resolve(contracts)\n                    }\n                }).catch(reject)\n            })(i)\n        }\n    })\n};\n\nconst getTransactionsDetail = (baseURL, txs) => {\n    if (txs.length > 0) {\n        return new Promise( (resolve, reject) => {\n            let txsWithDetails = [];\n            let counter = txs.length;\n            for (let i = 0; i < txs.length; i++) {\n                txsWithDetails.push({hash: txs[i]});\n                ( (x) => {\n                    getTransactionDetail(baseURL, txs[x]).then( (res) => {\n                        txsWithDetails[x] = res;\n                        counter--;\n                        if (counter === 0) {\n                            resolve(txsWithDetails)\n                        }\n                    }).catch(reject)\n                })(i)\n            }\n        })\n    } else {\n        return []\n    }\n};\n\nconst getTransactionDetail = (baseURL, txHash) => {\n    return getTransaction(baseURL, txHash).then( (res) => {\n        return {\n            hash: res.data.result.rawTransaction.hash,\n            from: res.data.result.rawTransaction.from,\n            to: res.data.result.rawTransaction.to,\n            blockNumber: res.data.result.rawTransaction.blockNumber,\n            parsedTransaction: {\n                txSig: res.data.result.txSig,\n                func4Bytes: res.data.result.func4Bytes,\n                parsedData: res.data.result.parsedData,\n            },\n            parsedEvents: res.data.result.parsedEvents,\n            internalCalls: res.data.result.rawTransaction.internalCalls,\n        }\n    })\n};\n\nconst generateReportData = (historicState) => {\n    if (historicState.length === 0) {\n        return []\n    }\n    let reportData = [historicState[0]];\n    let currentState = historicState[0];\n    for (let i = 1; i < historicState.length; i++) {\n        let nextState = isStateEqual(currentState, historicState[i]);\n        if (nextState) {\n            reportData.unshift(nextState);\n            currentState = nextState\n        }\n    }\n    return reportData\n};\n\nconst isStateEqual = (state1, state2) => {\n    let markedState2 = state2;\n    let noChange = true;\n    for (let i = 0; i < state1.historicStorage.length; i++) {\n        if (state1.historicStorage[i].value !== state2.historicStorage[i].value) {\n            markedState2.historicStorage[i].changed = true;\n            noChange = false\n        }\n    }\n    if (noChange) {\n        return false\n    }\n    return markedState2\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport ContractTable from '../components/ContractTable';\nimport ContractForm from '../components/ContractForm';\nimport { getContractsAction, selectContractAction } from '../redux/actions/contractActions';\nimport { changePageAction } from '../redux/actions/pageActions';\nimport { ContractPageId, ReportPageId } from '../constants';\nimport { addContract, deleteContract, getContracts } from '../client/fetcher';\n\nconst styles = {\n    card: {\n        minWidth: 275,\n        marginTop: 5,\n        marginBottom: 5,\n    },\n};\n\nclass ContractListContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            formIsOpen: false,\n            newContract: {\n                address: \"\",\n                abi: \"\",\n                template: \"\",\n                errorMessage: \"\",\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.getAllRegisteredContract()\n    }\n\n    getAllRegisteredContract = () => {\n        getContracts(this.props.rpcEndpoint).then( (contracts) => {\n            this.props.dispatch(getContractsAction(contracts))\n        })\n    };\n\n    handleOpenSetting = () => {\n        this.setState({ formIsOpen: true })\n    };\n\n    handleCloseSetting = () => {\n        this.setState({ formIsOpen: false })\n    };\n\n    handleNewContractAddressChange = (e) => {\n        this.setState({\n            newContract: {\n                ...this.state.newContract,\n                address: e.target.value,\n            },\n            errorMessage: \"\",\n        })\n    };\n\n    handleNewContractABIChange = (e) => {\n        this.setState({\n            newContract: {\n                ...this.state.newContract,\n                abi: e.target.value,\n            },\n            errorMessage: \"\",\n        })\n    };\n\n    handleNewContractTemplateChange = (e) => {\n        this.setState({\n            newContract: {\n                ...this.state.newContract,\n                template: e.target.value,\n            },\n            errorMessage: \"\",\n        })\n    };\n\n    handleNavigateContract = (e) => {\n        this.props.dispatch(selectContractAction(e.target.value));\n        this.props.dispatch(changePageAction(ContractPageId))\n    };\n\n    handleNavigateReport = (address) => {\n        this.props.dispatch(selectContractAction(address));\n        this.props.dispatch(changePageAction(ReportPageId))\n    };\n\n    handleRegisterNewContract = () => {\n        if (this.state.newContract.address === \"\"){\n            this.setState({\n                errorMessage: \"address must not be empty\",\n            });\n            return\n        }\n        if (this.state.newContract.abi === \"\"){\n            this.setState({\n                errorMessage: \"abi must not be empty\",\n            });\n            return\n        }\n        if (this.state.newContract.template === \"\") {\n            this.setState({\n                errorMessage: \"template must not be empty\",\n            });\n            return\n        }\n        addContract(this.props.rpcEndpoint, this.state.newContract, this.state.newContract.template).then( (res) => {\n            if (res.data.error) {\n                throw res.data.error.message\n            }\n            this.setState({ formIsOpen: false });\n            // give a small timeout to avoid fetch too fast\n            setTimeout( () => {\n                this.getAllRegisteredContract()\n            }, 500)\n        }).catch( (e) => {\n            this.setState({\n                errorMessage: e.toString()\n            });\n        });\n    };\n\n    handleContractUpdate = () => {\n        // TODO: update contract\n    };\n\n    handleContractDelete = (address) => {\n        deleteContract(this.props.rpcEndpoint, address).then( () => {\n            // TODO: handle error?\n            // give a small timeout to avoid fetch too fast\n            setTimeout( () => {\n                this.getAllRegisteredContract()\n            }, 500)\n        })\n    };\n\n    render(){\n        return (\n            <Card className={this.props.classes.card}>\n                <CardContent>\n                    <br/>\n                    <Typography variant=\"h6\" align=\"center\">\n                        Registered Contract List&nbsp;\n                        <IconButton onClick={this.getAllRegisteredContract} >\n                            <RefreshIcon/>\n                        </IconButton>\n                    </Typography>\n                    <br/>\n                    {\n                        this.props.contracts.length === 0 &&\n                        <h1 align=\"center\">&lt; No Records Found &gt;</h1>\n                    }\n                    {\n                        this.props.contracts.length !== 0 &&\n                        <ContractTable\n                            contracts={this.props.contracts}\n                            handleContractUpdate={this.handleContractUpdate}\n                            handleContractDelete={this.handleContractDelete}\n                            handleNavigateContract={this.handleNavigateContract}\n                            handleNavigateReport={this.handleNavigateReport}\n                        />\n                    }\n                    <br/>\n                    <IconButton color=\"primary\" variant=\"h4\" onClick={this.handleOpenSetting}>\n                        <AddIcon />\n                    </IconButton>\n                    <ContractForm\n                        isOpen={this.state.formIsOpen}\n                        handleCloseSetting={this.handleCloseSetting}\n                        handleNewContractAddressChange={this.handleNewContractAddressChange}\n                        handleNewContractABIChange={this.handleNewContractABIChange}\n                        handleNewContractTemplateChange={this.handleNewContractTemplateChange}\n                        handleRegisterNewContract={this.handleRegisterNewContract}\n                        newContract={this.state.newContract}\n                        errorMessage={this.state.errorMessage}\n                    />\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        rpcEndpoint: state.system.rpcEndpoint,\n        contracts: state.user.contracts,\n    }\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ContractListContainer))","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        marginTop: 10,\n        marginBottom: 10,\n        alignItems: 'center',\n        width: 1200,\n    },\n}));\n\nexport default function RecursiveInfoList(props) {\n    const classes = useStyles();\n    return (\n        <Paper className={classes.root} align=\"center\">\n            <br/>\n            <div>\n                <Button variant=\"contained\" color=\"primary\" onClick={props.handleReturn}>\n                    <ArrowBackIcon />\n                    &nbsp;\n                    Return\n                </Button>\n            </div>\n            <br/>\n            <List>\n                {\n                    Object.keys(props.displayData).map( (k, i) => (\n                        <ListItem key={i}>\n                            <Typography variant=\"caption\">{k + \":\"}&nbsp;</Typography>\n                            {\n                                JSON.stringify(props.displayData[k]).length > 100 ?\n                                    <TextareaAutosize\n                                        readOnly\n                                        rowsMax={4}\n                                        aria-label=\"maximum height\"\n                                        style={{fontSize: \"16px\", width: \"1000px\"}}\n                                        defaultValue={JSON.stringify(props.displayData[k])}\n                                    /> : <Typography>{JSON.stringify(props.displayData[k])}</Typography>\n                            }\n                        </ListItem>\n                    ))\n                }\n            </List>\n        </Paper>\n    );\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport SearchField from '../components/SearchField';\nimport ContractListContainer from './ContractListContainer';\nimport RecursiveInfoList from '../components/RecursiveInfoList';\nimport {getSingleBlock, getSingleTransaction} from '../client/fetcher';\n\nconst styles = {\n    root: {\n        marginTop: 10,\n        marginBottom: 10,\n    },\n    alert: {\n        marginTop: 5,\n        width: 1000,\n    }\n};\n\nclass SearchContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchText: \"\",\n            displayData: \"\",\n            errorMessage: \"\",\n        }\n    }\n\n    handleSearchTextChange = (e) => {\n        this.setState({\n            searchText: e.target.value,\n            errorMessage: \"\",\n        })\n    };\n\n    handleSearch = () => {\n        if ((/^[1-9][0-9]*$/g).test(this.state.searchText)) {\n            // search block\n            let blockNumber = parseInt(this.state.searchText);\n            if (this.props.lastPersistedBlockNumber < blockNumber) {\n                this.setState({errorMessage: \"block number exceed the last persisted\"});\n                return\n            }\n            getSingleBlock(this.props.rpcEndpoint, blockNumber).then( (res) => {\n                this.setState({\n                    displayData: res,\n                    errorMessage: \"\",\n                })\n            }).catch( (e) => {\n                this.setState({errorMessage: e.toString()})\n            });\n            return\n        }\n        if ((/^0x[0-9a-fA-F]{64}$/g).test(this.state.searchText)) {\n            // search tx\n            getSingleTransaction(this.props.rpcEndpoint, this.state.searchText).then( (res) => {\n                this.setState({\n                    displayData: res,\n                    errorMessage: \"\",\n                })\n            }).catch( (e) => {\n                this.setState({errorMessage: e.toString()})\n            });\n            return\n        }\n        this.setState({errorMessage: \"invalid search text\"});\n    };\n\n    handleReturn = () => {\n        this.setState({\n            displayData: \"\",\n        })\n    };\n\n    render() {\n        return (\n            <div className={this.props.classes.root} align=\"center\">\n                <br/>\n                <SearchField\n                    searchText={this.state.searchText}\n                    handleSearchTextChange={this.handleSearchTextChange}\n                    handleSearch={this.handleSearch}\n                />\n                {\n                    this.state.errorMessage &&\n                    <Alert severity=\"error\" className={this.props.classes.alert}>{this.state.errorMessage}</Alert>\n                }\n                {\n                    this.state.displayData === \"\" &&\n                    <ContractListContainer />\n                }\n                {\n                    this.state.displayData !== \"\" &&\n                    <RecursiveInfoList\n                        displayData={this.state.displayData}\n                        handleReturn={this.handleReturn}\n                    />\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        rpcEndpoint: state.system.rpcEndpoint,\n        lastPersistedBlockNumber: state.system.lastPersistedBlockNumber,\n    }\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(SearchContainer))","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction SettingForm(props) {\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            props.handleSetRPCEndpoint()\n        }\n    };\n\n    return (\n        <Dialog open={props.isOpen} onClose={props.handleCloseSetting} aria-labelledby=\"form-dialog-title\" maximumwidth=\"400\" fullWidth>\n            <DialogTitle id=\"form-dialog-title\">Connection ({props.rpcEndpoint})</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Set the RPCEndpoint for Reporting Engine.\n                </DialogContentText>\n                <br/>\n                <TextField\n                    label=\"RPC Endpoint\"\n                    value={props.newRPCEndpoint}\n                    onChange={props.handleRPCEndpointChange}\n                    onKeyPress={handleKeyPress}\n                    margin=\"dense\"\n                    fullWidth\n                    autoFocus\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.handleCloseSetting} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={props.handleSetRPCEndpoint} color=\"primary\">\n                    Update\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default SettingForm","import React from 'react';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ContractPageId, HomePageId, ReportPageId } from '../constants';\n\nfunction MenuDropdown(props) {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (e) => {\n        setAnchorEl(e.currentTarget);\n    };\n\n    const handleClose = (e) => {\n        setAnchorEl(null);\n    };\n\n    const handleMenuHome = (e) => {\n        props.handleMenuClick(\"Home\");\n        handleClose(e);\n    };\n\n    const handleMenuContract = (e) => {\n        props.handleMenuClick(\"Contract\");\n        handleClose(e);\n    };\n\n    const handleMenuReport = (e) => {\n        props.handleMenuClick(\"Report\");\n        handleClose(e);\n    };\n\n    return (\n        <div>\n            <IconButton variant=\"h4\" onClick={handleClick}>\n                <MenuIcon color=\"action\" />\n            </IconButton>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem value={HomePageId} onClick={handleMenuHome}>Home</MenuItem>\n                <MenuItem value={ContractPageId} onClick={handleMenuContract}>Contract</MenuItem>\n                <MenuItem value={ReportPageId} onClick={handleMenuReport}>Report</MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\nexport default MenuDropdown","import * as types from '../actionTypes';\n\nexport const connectAction = () => ({\n    type: types.CONNECT,\n});\n\nexport const disconnectAction = () => ({\n    type: types.DISCONNECT,\n});\n\nexport const updateEndpointAction = (rpcEndpoint) => ({\n    type: types.UPDATE_ENDPOINT,\n    rpcEndpoint,\n});\n\nexport const updateBlockNumberAction = (lastPersistedBlockNumber) => ({\n    type: types.UPDATE_BLOCK_NUMBER,\n    lastPersistedBlockNumber,\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport SyncDisabledIcon from '@material-ui/icons/SyncDisabled';\nimport Fade from '@material-ui/core/Fade';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport SettingForm from '../components/SettingForm';\nimport MenuDropdown from '../components/MenuDropdown';\nimport { changePageAction } from '../redux/actions/pageActions';\nimport { connectAction, disconnectAction, updateEndpointAction, updateBlockNumberAction } from '../redux/actions/systemActions';\nimport { getBlockNumber } from '../client/fetcher';\nimport { HomePageId } from '../constants';\n\nconst styles = {\n    grow: {\n        flexGrow: 1,\n    },\n};\n\nclass HeaderContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            formIsOpen: false,\n            newRPCEndpoint: \"\",\n            blockNumberAppear: true,\n        }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.connectReporting(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    blockNumberBlinkEffect = () => {\n        this.setState({blockNumberAppear: false});\n        setTimeout(() => {\n            this.setState({blockNumberAppear: true})\n        }, 500)\n    };\n\n    connectReporting = () => {\n        getBlockNumber(this.props.rpcEndpoint).then( (res) => {\n            if (this.props.lastPersistedBlockNumber !== res) {\n                this.blockNumberBlinkEffect();\n                if (!this.props.isConnected) {\n                    this.props.dispatch(connectAction())\n                }\n                this.props.dispatch(updateBlockNumberAction(res));\n            }\n        }).catch( (e) => {\n            if (this.props.isConnected) {\n                this.blockNumberBlinkEffect();\n                this.props.dispatch(disconnectAction());\n                this.props.dispatch(updateBlockNumberAction(\"\"));\n            }\n        })\n    };\n\n    toHomePage = () => {\n        this.handleMenuClick(HomePageId)\n    };\n\n    handleMenuClick = (page) => {\n        this.props.dispatch(changePageAction(page))\n    };\n\n    handleOpenSetting = () => {\n        this.setState({ formIsOpen: true })\n    };\n\n    handleCloseSetting = () => {\n        this.setState({ formIsOpen: false })\n    };\n\n    handleRPCEndpointChange = (e) => {\n        this.setState({ newRPCEndpoint: e.target.value })\n    };\n\n    handleSetRPCEndpoint = () => {\n        this.props.dispatch(updateEndpointAction(this.state.newRPCEndpoint));\n        this.connectReporting();\n        this.setState({ formIsOpen: false })\n    };\n\n    render(){\n        return (\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <ButtonBase onClick={this.toHomePage}>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            <img src={require('../resources/quorum-logo.png')} width=\"40\" height=\"20\" alt=\"\" />\n                            &nbsp;\n                            Quorum Reporting\n                            &nbsp;\n                        </Typography>\n                    </ButtonBase>\n                    <span className={this.props.classes.grow}/>\n                    <Typography variant=\"h4\">\n                        {\n                            this.props.isConnected?<SyncIcon color=\"inherit\" />:<SyncDisabledIcon color=\"error\" />\n                        }\n                    </Typography>\n                    <Fade in={this.state.blockNumberAppear} timeout={1000}>\n                        <Typography variant=\"h5\" color=\"inherit\">\n                            &nbsp;\n                            {\n                                this.props.isConnected?(\"# \" + this.props.lastPersistedBlockNumber):\"# N/A\"\n                            }\n                            &nbsp;\n                        </Typography>\n                    </Fade>\n                    <MenuDropdown\n                        handleMenuClick={this.handleMenuClick}\n                    />\n                    <IconButton variant=\"h4\" onClick={this.handleOpenSetting}>\n                        <SettingsIcon color=\"action\" />\n                    </IconButton>\n                    <SettingForm\n                        rpcEndpoint={this.props.rpcEndpoint}\n                        isOpen={this.state.formIsOpen}\n                        handleCloseSetting={this.handleCloseSetting}\n                        handleRPCEndpointChange={this.handleRPCEndpointChange}\n                        handleSetRPCEndpoint={this.handleSetRPCEndpoint}\n                        newRPCEndpoint={this.state.newRPCEndpoint}\n                    />\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        rpcEndpoint: state.system.rpcEndpoint,\n        isConnected: state.system.isConnected,\n        lastPersistedBlockNumber: state.system.lastPersistedBlockNumber,\n    }\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(HeaderContainer))\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n    }\n}));\n\nfunction ContractSelector(props) {\n    const classes = useStyles();\n    return (\n        <div>\n            <FormControl variant=\"filled\" size=\"small\" className={classes.formControl} style={{minWidth: 400}}>\n                <InputLabel>Contract</InputLabel>\n                <Select\n                    value={props.selectedContract}\n                    onChange={props.handleSelectedContractChange}\n                >\n                    {props.contracts.map(c => (\n                        <MenuItem key={c.address} value={c.address}>{c.address}</MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl variant=\"filled\" size=\"small\" className={classes.formControl} style={{minWidth: 400}}>\n                <InputLabel>Actions</InputLabel>\n                <Select\n                    value={props.selectedAction}\n                    onChange={props.handleSelectedActionChange}\n                >\n                    {props.actions.map(a => (\n                        <MenuItem key={a} value={a}>{a}</MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default ContractSelector","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nfunction ExpandableTxRow(props) {\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open) }>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.txHash}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.from}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.to}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.blockNumber}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6} >\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1} maxWidth={\"800px\"}>\n                            <Typography>Parsed Transaction</Typography>\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell><strong>Transaction Signature</strong></TableCell>\n                                        <TableCell><strong>Function 4 Bytes</strong></TableCell>\n                                        <TableCell><strong>Parsed Data</strong></TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell component=\"th\" scope=\"row\">{props.parsedTransaction.txSig}</TableCell>\n                                        <TableCell>{props.parsedTransaction.func4Bytes}</TableCell>\n                                        <TableCell>{JSON.stringify(props.parsedTransaction.parsedData)}</TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                            <br/>\n                            {\n                                (props.parsedEvents && props.parsedEvents.length > 0) &&\n                                <div>\n                                    <Typography>Parsed Events</Typography>\n                                    <Table size=\"small\" aria-label=\"a dense table\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell><strong>Event Signature</strong></TableCell>\n                                                <TableCell><strong>Parsed Data</strong></TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {\n                                                props.parsedEvents.map((event, i) => (\n                                                    <TableRow key={i}>\n                                                        <TableCell>{event.eventSig}</TableCell>\n                                                        <TableCell>{JSON.stringify(event.parsedData)}</TableCell>\n                                                    </TableRow>\n                                                ))\n                                            }\n                                        </TableBody>\n                                    </Table>\n                                </div>\n                            }\n                            <br/>\n                            {\n                                (props.internalCalls && props.internalCalls.length > 0) &&\n                                <div>\n                                    <Typography>Internal Calls</Typography>\n                                    <Table size=\"small\" aria-label=\"a dense table\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell><strong>From</strong></TableCell>\n                                                <TableCell><strong>To</strong></TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {\n                                                props.internalCalls.map((c, i) => (\n                                                    <TableRow key={i}>\n                                                        <TableCell>{c.from}</TableCell>\n                                                        <TableCell>{c.to}</TableCell>\n                                                    </TableRow>\n                                                ))\n                                            }\n                                        </TableBody>\n                                    </Table>\n                                </div>\n                            }\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nexport default ExpandableTxRow","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpandableTxRow from './ExpandableTxRow';\n\nfunction TransactionResultTable(props) {\n    return (\n        <div>\n            { !props.isLoading &&\n                <div>\n                    <TableContainer component={Paper}>\n                        <Table size=\"small\" aria-label=\"collapsible table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell width=\"20%\"/>\n                                    <TableCell width=\"20%\"><strong>Transaction Hash</strong></TableCell>\n                                    <TableCell width=\"20%\"><strong>From</strong></TableCell>\n                                    <TableCell width=\"20%\"><strong>To</strong></TableCell>\n                                    <TableCell width=\"20%\"><strong>Block Number</strong></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {(props.displayData.slice(props.currentPage * props.pageSize, props.currentPage * props.pageSize + props.pageSize)).map((tx, i) => (\n                                    <ExpandableTxRow\n                                        key={i}\n                                        txHash={tx.hash}\n                                        from={tx.from}\n                                        to={tx.to}\n                                        blockNumber={tx.blockNumber}\n                                        parsedTransaction={tx.parsedTransaction}\n                                        parsedEvents={tx.parsedEvents}\n                                        internalCalls={tx.internalCalls}\n                                    />\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        component=\"div\"\n                        rowsPerPageOptions={[]}\n                        count={props.totalTxs}\n                        rowsPerPage={props.pageSize}\n                        page={props.currentPage}\n                        onChangePage={props.handleChangePage}\n                    />\n                </div>\n            }\n            { props.isLoading &&\n                <div align=\"center\">\n                    <br/>\n                    <CircularProgress/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default TransactionResultTable","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\n\nfunction ExpandableEventRow(props) {\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open) }>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.topic}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.txHash}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.address}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {props.blockNumber}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6} >\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1} maxWidth={\"800px\"}>\n                            <Typography>Parsed Event</Typography>\n                            <Table size=\"small\" aria-label=\"a dense table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell><strong>Event Signature</strong></TableCell>\n                                        <TableCell><strong>Parsed Data</strong></TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell component=\"th\" scope=\"row\">{props.parsedEvent.eventSig}</TableCell>\n                                        <TableCell>{JSON.stringify(props.parsedEvent.parsedData)}</TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nexport default ExpandableEventRow","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpandableEventRow from './ExpandableEventRow';\n\nfunction TransactionResultTable(props) {\n    return (\n        <div>\n            { !props.isLoading &&\n                <div>\n                    <TableContainer component={Paper}>\n                        <Table size=\"small\" aria-label=\"collapsible table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell width=\"20%\"/>\n                                    <TableCell width=\"20%\"><strong>Event Topic</strong></TableCell>\n                                    <TableCell width=\"20%\"><strong>Transaction Hash</strong></TableCell>\n                                    <TableCell width=\"20%\"><strong>Address</strong></TableCell>\n                                    <TableCell width=\"20%\"><strong>Block Number</strong></TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {(props.displayData.slice(props.currentPage * props.pageSize, props.currentPage * props.pageSize + props.pageSize)).map((event, i) => (\n                                    <ExpandableEventRow\n                                        key={i}\n                                        topic={event.topic}\n                                        txHash={event.txHash}\n                                        address={event.address}\n                                        blockNumber={event.blockNumber}\n                                        parsedEvent={event.parsedEvent}\n                                    />\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        component=\"div\"\n                        rowsPerPageOptions={[]}\n                        count={props.totalEvents}\n                        rowsPerPage={props.pageSize}\n                        page={props.currentPage}\n                        onChangePage={props.handleChangePage}\n                    />\n                </div>\n            }\n            { props.isLoading &&\n                <div align=\"center\">\n                    <br/>\n                    <CircularProgress/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default TransactionResultTable","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Alert from '@material-ui/lab/Alert';\nimport ContractSelector from '../components/ContractSelector';\nimport TransactionResultTable from '../components/TransactionResultTable';\nimport EventResultTable from '../components/EventResultTable';\nimport { selectContractAction } from '../redux/actions/contractActions';\nimport { GetContractCreationTx, GetEvents, GetInternalToTxs, GetToTxs } from '../constants';\nimport { getContractCreationTx, getInternalToTxs, getToTxs, getEvents } from '../client/fetcher';\n\nconst styles = {\n    card: {\n        minWidth: 275,\n        marginTop: 5,\n        marginBottom: 5,\n    },\n};\n\nconst pageSize = 10;\n\nconst actions = [GetContractCreationTx, GetToTxs, GetInternalToTxs, GetEvents];\n\nclass ContractInfoContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedAction: \"\",\n            displayTxResult: false,\n            displayEventResult: false,\n            isLoading: true,\n            displayData: [],\n            displayDataLength: 0,\n            currentPage: 0,\n            errorMessage: \"\",\n            // fix current contract and action for paging\n            currentContract: \"\",\n            currentSelectedAction: \"\",\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.dispatch(selectContractAction(\"\"))\n    }\n\n    handleSelectedContractChange = (e) => {\n        this.setState({ errorMessage: \"\"});\n        this.props.dispatch(selectContractAction(e.target.value))\n    };\n\n    handleSelectedActionChange = (e) => {\n        this.setState({\n            errorMessage: \"\",\n            selectedAction: e.target.value,\n        })\n    };\n\n    handleChangePage = (event, newPage) => {\n        this.setState({currentPage: newPage});\n        this.handleSearch(false)\n    };\n\n    handleSearch = (newSearch) => {\n        // clear display\n        this.setState({\n            displayTxResult: false,\n            displayEventResult: false,\n        });\n        // check new search condition\n        let currentContract = this.state.currentContract;\n        let currentSelectedAction = this.state.currentSelectedAction;\n        let currentPage = this.state.currentPage;\n        if (newSearch) {\n            if (this.props.selectedContract === \"\") {\n                this.setState({ errorMessage: \"no contract selected\"});\n                return\n            }\n            if (this.state.selectedAction === \"\"){\n                this.setState({ errorMessage: \"no action selected\"});\n                return\n            }\n            currentContract = this.props.selectedContract;\n            currentSelectedAction = this.state.selectedAction;\n            currentPage = 0;\n            this.setState({ currentContract, currentSelectedAction, currentPage: 0 })\n        }\n        // start loading\n        this.setState({\n            isLoading: true,\n            errorMessage: \"\",\n        });\n        this.searchByPage(currentContract, currentSelectedAction, currentPage)\n    };\n\n    searchByPage = (contract, action, pageNumber) => {\n        if (action === GetEvents) {\n            getEvents(this.props.rpcEndpoint, contract, {pageSize, pageNumber}).then( (res) => {\n                this.setState({\n                    displayData: res.data,\n                    displayDataLength: res.total,\n                    isLoading: false,\n                })\n            }).catch( (e) => {\n                this.setState({\n                    displayData: [],\n                    displayDataLength: 0,\n                    isLoading: false,\n                    errorMessage: e.toString(),\n                })\n            });\n            this.setState({displayEventResult: true});\n        } else {\n            switch (action) {\n                case GetContractCreationTx:\n                    getContractCreationTx(this.props.rpcEndpoint, contract).then( (res) => {\n                        this.setState({\n                            displayData: res.data,\n                            displayDataLength: res.total,\n                            isLoading: false,\n                        })\n                    }).catch( (e) => {\n                        console.log(e);\n                        this.setState({\n                            displayData: [],\n                            displayDataLength: 0,\n                            isLoading: false,\n                            errorMessage: e.toString(),\n                        })\n                    });\n                    break;\n                case GetToTxs:\n                    getToTxs(this.props.rpcEndpoint, contract, {pageSize, pageNumber}).then( (res) => {\n                        this.setState({\n                            displayData: res.data,\n                            displayDataLength: res.total,\n                            isLoading: false,\n                        })\n                    }).catch( (e) => {\n                        this.setState({\n                            displayData: [],\n                            displayDataLength: 0,\n                            isLoading: false,\n                            errorMessage: e.toString(),\n                        })\n                    });\n                    break;\n                case GetInternalToTxs:\n                    getInternalToTxs(this.props.rpcEndpoint, contract, {pageSize, pageNumber}).then( (res) => {\n                        this.setState({\n                            displayData: res.data,\n                            displayDataLength: res.total,\n                            isLoading: false,\n                        })\n                    }).catch( (e) => {\n                        this.setState({\n                            displayData: [],\n                            displayDataLength: 0,\n                            isLoading: false,\n                            errorMessage: e.toString(),\n                        })\n                    });\n                    break;\n                default:\n                    this.setState({\n                        displayData: [],\n                        displayDataLength: 0,\n                        isLoading: false,\n                        errorMessage: \"unknown action: \" + action.toString(),\n                    })\n            }\n            this.setState({displayTxResult: true});\n        }\n    };\n\n    render(){\n        return (\n            <Card className={this.props.classes.card}>\n                <CardContent>\n                    <div align=\"center\">\n                        <Typography variant=\"h6\">\n                            Select Contract\n                        </Typography>\n                        <br/>\n                        <ContractSelector\n                            selectedContract={this.props.selectedContract}\n                            contracts={this.props.contracts}\n                            handleSelectedContractChange={this.handleSelectedContractChange}\n                            actions={actions}\n                            selectedAction={this.state.selectedAction}\n                            handleSelectedActionChange={this.handleSelectedActionChange}\n                        />\n                        <br/>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleSearch.bind(null, true)}>\n                            <SearchIcon />\n                            &nbsp;\n                            Search\n                        </Button>\n                    </div>\n                    <br/>\n                    {\n                        this.state.errorMessage &&\n                        <div>\n                            <br/>\n                            <Alert severity=\"error\">{this.state.errorMessage}</Alert>\n                        </div>\n                    }\n                    {\n                        this.state.displayTxResult &&\n                        <TransactionResultTable\n                            displayData={this.state.displayData}\n                            isLoading={this.state.isLoading}\n                            currentPage={this.state.currentPage}\n                            pageSize={pageSize}\n                            totalTxs={this.state.displayDataLength}\n                            handleChangePage={this.handleChangePage}\n                        />\n                    }\n                    {\n                        this.state.displayEventResult &&\n                        <EventResultTable\n                            displayData={this.state.displayData}\n                            isLoading={this.state.isLoading}\n                            currentPage={this.state.currentPage}\n                            pageSize={pageSize}\n                            totalEvents={this.state.displayDataLength}\n                            handleChangePage={this.handleChangePage}\n                        />\n                    }\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        rpcEndpoint: state.system.rpcEndpoint,\n        contracts: state.user.contracts,\n        selectedContract: state.user.selectedContract,\n    }\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ContractInfoContainer))","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport GavelIcon from '@material-ui/icons/Gavel';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n    }\n}));\n\nfunction ReportForm(props) {\n    const classes = useStyles();\n    return (\n        <div align=\"center\">\n            <FormControl variant=\"filled\" size=\"small\" className={classes.formControl} style={{minWidth:400}}>\n                <InputLabel>Contract</InputLabel>\n                <Select\n                    value={props.selectedContract}\n                    onChange={props.handleSelectedContractChange}\n                >\n                    {props.contracts.map( c => (\n                        <MenuItem key={c.address} value={c.address}>{c.address}</MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <TextField\n                    label=\"Start Block Number\"\n                    value={props.startBlockNumber}\n                    onChange={props.handleStartBlockChange}\n                    variant=\"filled\"\n                    size=\"small\"\n                />\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <TextField\n                    label=\"End Block Number\"\n                    value={props.endBlockNumber}\n                    onChange={props.handleEndBlockChange}\n                    variant=\"filled\"\n                    size=\"small\"\n                />\n            </FormControl>\n            <br/>\n            <br/>\n            <Button variant=\"contained\" color=\"primary\" onClick={props.handleReport}>\n                <GavelIcon />\n                &nbsp;\n                Generate Report\n            </Button>\n        </div>\n    )\n}\n\nexport default ReportForm","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction Report(props) {\n    return (\n        <div>\n            <TableContainer component={Paper}>\n                <Table size=\"small\" aria-label=\"collapsible table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell width=\"10%\"><strong>Block Number</strong></TableCell>\n                            <TableCell width=\"90%\"><strong>State</strong></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    { !props.isLoading &&\n                        <TableBody>\n                            {\n                                props.parsedStorage.map((s, i) => (\n                                    <TableRow key={i}>\n                                        <TableCell>{s.blockNumber}</TableCell>\n                                        <TableCell>\n                                            <Table size=\"small\" aria-label=\"collapsible table\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell width=\"20%\"><strong>Name</strong></TableCell>\n                                                        <TableCell width=\"30%\"><strong>Type</strong></TableCell>\n                                                        <TableCell width=\"50%\"><strong>Value</strong></TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {\n                                                        s.historicStorage.map((v, i) => (\n                                                            v.changed?\n                                                                <TableRow key={i} style={{backgroundColor:'#88aaff'}}>\n                                                                    <TableCell><div>{v.name}</div></TableCell>\n                                                                    <TableCell><div>{v.type}</div></TableCell>\n                                                                    <TableCell>\n                                                                        <div style={{maxWidth: \"500px\"}}>\n                                                                            {\n                                                                                v.type === \"string\" ?\n                                                                                    <TextareaAutosize\n                                                                                        readOnly\n                                                                                        rowsMax={4}\n                                                                                        rowsMin={2}\n                                                                                        aria-label=\"maximum height\"\n                                                                                        style={{fontSize: \"15px\", width: \"500px\"}}\n                                                                                        defaultValue={\"\\\"\"+v.value+\"\\\"\"}\n                                                                                    /> : v.value.toString()\n                                                                            }\n                                                                        </div>\n                                                                    </TableCell>\n                                                                </TableRow> :\n                                                                <TableRow key={i}>\n                                                                    <TableCell><div>{v.name}</div></TableCell>\n                                                                    <TableCell><div>{v.type}</div></TableCell>\n                                                                    <TableCell>\n                                                                        <div style={{maxWidth: \"400px\"}}>\n                                                                            {\n                                                                                v.type === \"string\" ?\n                                                                                    <TextareaAutosize\n                                                                                        readOnly\n                                                                                        rowsMax={4}\n                                                                                        rowsMin={2}\n                                                                                        aria-label=\"maximum height\"\n                                                                                        style={{fontSize: \"15px\", width: \"500px\"}}\n                                                                                        defaultValue={\"\\\"\"+v.value+\"\\\"\"}\n                                                                                    /> : v.value.toString()\n                                                                            }\n                                                                        </div>\n                                                                    </TableCell>\n                                                                </TableRow>\n                                                        ))\n                                                    }\n                                                </TableBody>\n                                            </Table>\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                            }\n                        </TableBody>\n                    }\n                </Table>\n            </TableContainer>\n            { props.isLoading &&\n                <div align=\"center\">\n                    <br/>\n                    <CircularProgress/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Report","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport ReportForm from '../components/ReportForm';\nimport Report from '../components/Report';\nimport { getReportData } from '../client/fetcher';\nimport { selectContractAction } from '../redux/actions/contractActions';\n\nconst styles = {\n    card: {\n        minWidth: 275,\n        marginTop: 5,\n        marginBottom: 5,\n    },\n};\n\nclass ReportContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            startBlockNumber: \"\",\n            endBlockNumber: \"\",\n            reportData: [],\n            isLoading: false,\n            displayReport: false,\n            errorMessage: \"\",\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            startBlockNumber: 1,\n            endBlockNumber: this.props.lastPersistedBlockNumber,\n        })\n    }\n\n    componentWillUnmount() {\n        this.props.dispatch(selectContractAction(\"\"))\n    }\n\n    handleSelectedContractChange = (e) => {\n        this.setState({ errorMessage: \"\" });\n        this.props.dispatch(selectContractAction(e.target.value))\n    };\n\n    handleStartBlockChange = (e) => {\n        this.setState({\n            startBlockNumber: e.target.value,\n            errorMessage: \"\",\n        })\n    };\n\n    handleEndBlockChange = (e) => {\n        this.setState({\n            endBlockNumber: e.target.value,\n            errorMessage: \"\",\n        })\n    };\n\n    handleReport = () => {\n        if (this.props.selectedContract === \"\") {\n            this.setState({ errorMessage: \"no contract selected\" });\n            return\n        }\n        if (this.state.startBlockNumber === \"\" || isNaN(this.state.startBlockNumber)) {\n            this.setState({\n                startBlockNumber: \"\",\n                errorMessage: \"invalid start block number\",\n            });\n            return\n        }\n        if (this.state.endBlockNumber === \"\" || isNaN(this.state.endBlockNumber)) {\n            this.setState({\n                endBlockNumber: \"\",\n                errorMessage: \"invalid end block number\",\n            });\n            return\n        }\n        this.setState({\n            reportData: [],\n            displayReport: true,\n            isLoading: true,\n            errorMessage: \"\",\n        });\n        getReportData(this.props.rpcEndpoint, this.props.selectedContract, this.state.startBlockNumber, this.state.endBlockNumber).then( (res) => {\n            this.setState({\n                reportData: res,\n                isLoading: false,\n            })\n        }).catch( (e) => {\n            this.setState({\n                isLoading: false,\n                errorMessage: e.toString(),\n            })\n        })\n    };\n\n    render(){\n        return (\n            <Card className={this.props.classes.card}>\n                <CardContent>\n                    <Typography variant=\"h6\" align=\"center\">\n                        Report\n                    </Typography>\n                    <br/>\n                    {\n                        this.props.contracts.length === 0 &&\n                        <h1 align=\"center\">&lt; No Records Found &gt;</h1>\n                    }\n                    {\n                        this.props.contracts.length !== 0 &&\n                        <ReportForm\n                            selectedContract={this.props.selectedContract}\n                            startBlockNumber={this.state.startBlockNumber}\n                            endBlockNumber={this.state.endBlockNumber}\n                            contracts={this.props.contracts}\n                            handleSelectedContractChange={this.handleSelectedContractChange}\n                            handleStartBlockChange={this.handleStartBlockChange}\n                            handleEndBlockChange={this.handleEndBlockChange}\n                            handleReport={this.handleReport}\n                        />\n                    }\n                    <br/>\n                    {\n                        this.state.errorMessage &&\n                        <div>\n                            <br/>\n                            <Alert severity=\"error\">{this.state.errorMessage}</Alert>\n                        </div>\n                    }\n                    {\n                        this.state.displayReport &&\n                        <Report\n                            parsedStorage={this.state.reportData}\n                            isLoading={this.state.isLoading}\n                        />\n                    }\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        rpcEndpoint: state.system.rpcEndpoint,\n        contracts: state.user.contracts,\n        selectedContract: state.user.selectedContract,\n        lastPersistedBlockNumber: state.system.lastPersistedBlockNumber,\n    }\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ReportContainer))","import React from 'react'\nimport { connect } from 'react-redux';\nimport SearchContainer from '../containers/SearchContainer';\nimport HeaderContainer from '../containers/HeaderContainer';\nimport ContractInfoContainer from '../containers/ContractInfoContainer';\nimport ReportContainer from '../containers/ReportContainer';\nimport { ContractPageId, HomePageId, ReportPageId } from '../constants';\n\nclass HomePage extends React.Component {\n\n    renderPageContent = () => {\n        switch (this.props.page) {\n            case HomePageId:\n                return <SearchContainer/>;\n            case ContractPageId:\n                return <ContractInfoContainer/>;\n            case ReportPageId:\n                return <ReportContainer/>;\n            default:\n                return <SearchContainer/>;\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <HeaderContainer/>\n                { this.renderPageContent() }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        page: state.user.page,\n    }\n};\n\nexport default connect(mapStateToProps)(HomePage)","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport HomePage from './pages/HomePage';\n\nconst theme = createMuiTheme({});\n\nclass App extends React.Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <HomePage />\n            </MuiThemeProvider>\n        )\n    }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n), document.getElementById('root'));"],"sourceRoot":""}